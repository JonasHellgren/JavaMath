<relevant_code>



<file file_path=/src/main/java/apache_common/info.md>

org.apache.commons.math4.distribution - probability distributions
org.apache.commons.math4.fraction - rational numbers
org.apache.commons.math4.transform - transform methods (Fast Fourier)
org.apache.commons.math4.geometry - geometry (Euclidean spaces and Binary Space Partitioning)
org.apache.commons.math4.optim - function maximization or minimization
org.apache.commons.math4.ode - Ordinary Differential Equations integration
org.apache.commons.math4.genetics - Genetic Algorithms
org.apache.commons.math4.fitting - Curve Fitting
org.apache.commons.math4.ml - Machine Learning


</file>



<file file_path=/src/main/java/plotting/HeatMapChartPlotterDouble.java>
package plotting;


    public class HeatMapChartPlotterDouble {

        public static void main(String[] args) {
            double[][] data = {
                    {1.0, 2.0, 3.0},
                    {2.0, 3.0, 4.0},
                    {5.0, 4.0, 5.0}
            };


            var shower=SwingShowHeatMap.builder()
                 //   .xLabels(new String[]{"X1", "X2", "X3"})
              //      .yLabels(new String[]{"Y1", "Y2", "Y3"})
                    .isLabels(false)
                    .build();

            shower.showMap(data,"map");
        }



    }





</file>



<file file_path=/src/main/java/plotting/ScatterChart.java>
package plotting;

import common.RandUtils;
import org.knowm.xchart.SwingWrapper;
import org.knowm.xchart.XYChart;
import org.knowm.xchart.XYChartBuilder;
import org.knowm.xchart.XYSeries;
import org.knowm.xchart.style.Styler;

import java.util.LinkedList;
import java.util.List;

public class ScatterChart {

    public static void main(String[] args) {

        XYChart chart = getChart();
        new SwingWrapper<>(chart).displayChart();
    }

    public static XYChart getChart() {

        // Create Chart
        XYChart chart = new XYChartBuilder().width(400).height(300).build();

        // Customize Chart
        chart.getStyler().setDefaultSeriesRenderStyle(XYSeries.XYSeriesRenderStyle.Scatter);
        chart.getStyler().setChartTitleVisible(false);
        chart.getStyler().setLegendPosition(Styler.LegendPosition.InsideSW);
        chart.getStyler().setMarkerSize(5);

        // Series
        List<Double> xData = new LinkedList<>();
        List<Double> yData = new LinkedList<>();
        int size = 100;
        for (int i = 0; i < size; i++) {
            xData.add(RandUtils.getRandomDouble(-10,10));
            yData.add(RandUtils.getRandomDouble(-10,10));

        }
        chart.addSeries("Scatter", xData, yData);

        return chart;
    }


}

</file>



<file file_path=/src/main/java/plotting/SwingShowHeatMap.java>
.dispose();
        return image;
    }

    private void drawMap(double[][] data, Graphics2D g2d, int cellWidth, int cellHeight) {
        // Calculate min and max values for color scaling
        double min = Arrays.stream(data).flatMapToDouble(Arrays::stream).min().orElse(0);
        double max = Arrays.stream(data).flatMapToDouble(Arrays::stream).max().orElse(1);

        // Draw heatmap cells with y-axis inverted
        for (int row = 0; row < data.length; row++) {
            for (int col = 0; col < data[row].length; col++) {
                double value = data[row][col];
                Color color = calculateColor(value, min, max);
                g2d.setColor(color);
                // Invert y-axis for cell drawing
                int x = col * cellWidth + margin;
                int y = (data.length - 1 - row) * cellHeight;
                g2d.fillRect(x, y, cellWidth, cellHeight);

                // Draw value in cell
                g2d.setColor(Color.BLACK);
                String text = String.format("%.1f", value);
                FontMetrics metrics = g2d.getFontMetrics();
                int textX = x + (cellWidth - metrics.stringWidth(text)) / 2;
                int textY = y + ((cellHeight - metrics.getHeight()) / 2) + metrics.getAscent();
                g2d.drawString(text, textX, textY);
            }
        }
    }

    private void drawTitle(String title, Graphics2D g2d) {
        g2d.setFont(new Font("Serif", Font.BOLD, 20));
        FontMetrics titleMetrics = g2d.getFontMetrics();
        int titleX = (width - titleMetrics.stringWidth(title)) / 2;
        int titleY = titleMetrics.getAscent();
</file>



<file file_path=/src/test/java/optimization_apache/TestCircleFitting.java>

    public static final double REL_TRES_HOLD = 1e-1;
    public static final double ABS_TRES_HOLD = 1e-0;
    public static final double[] INITIAL_GUESS = {98.680, 47.345};
    public static final int NOF_EVAL_MAX = 1000;
    public static final double DELTA = 1.0e-1;

    @Test
    public void testCircleFitting2() {

        //x = circle center = (px,py)
        CircleScalar circle = new CircleScalar();
        circle.addPoint(30.0, 68.0);
        circle.addPoint(50.0, -6.0);
        circle.addPoint(110.0, -20.0);
        circle.addPoint(35.0, 15.0);
        circle.addPoint(45.0, 97.0);
        MultivariateOptimizer optimizer=TestHelper.getConjugateGradientOptimizer(REL_TRES_HOLD, ABS_TRES_HOLD);
        PointValuePair optimum = TestHelper.gradientOptimize(
                optimizer,circle.getObjectiveFunction(),circle.getObjectiveFunctionGradient(),
                INITIAL_GUESS, NOF_EVAL_MAX);

        TestHelper.printPointValuePair(optimum);
        TestHelper.printOptimizerStats(optimizer);

        Vector2D center = new Vector2D(optimum.getPointRef()[0], optimum.getPointRef()[1]);
        Assert.assertEquals(69.960161753, circle.getRadius(center), DELTA);
        Assert.assertEquals(96.075902096, center.getX(), DELTA);
        Assert.assertEquals(48.135167894, center.getY(), DELTA);
    }

}

</file>



<file file_path=/src/main/java/plotting/HeatMapChartPlotterInt.java>

import org.jetbrains.annotations.NotNull;
import org.knowm.xchart.AnnotationText;
import org.knowm.xchart.HeatMapChart;
import org.knowm.xchart.HeatMapChartBuilder;

import org.knowm.xchart.SwingWrapper;
import java.awt.*;
import java.util.stream.IntStream;

public class HeatMapChartPlotterInt {

    public static void main(String[] args) {
        int[][] data = getData();
        int[][] dataRot=transposeMatrix(data);
        HeatMapChart chart = createChart();
        addData(chart, dataRot);
        addCellText(chart, data);
        new SwingWrapper<>(chart).displayChart();
    }

    private static int[][] getData() {
        return new int[][]{
                {0, 1, 50, 100,10},  //(0,0), (1,0),...
                {2, 3, 5, 3,10},
                {2, 4, 3, 2,10},
                {30, 2, 4, 3,10}   //x(0,3), x(1,3),...
        };
    }

    @NotNull
    private static org.knowm.xchart.HeatMapChart createChart() {
        var chart = new HeatMapChartBuilder()
                .title("Sample HeatMap")
                .xAxisTitle("X Axis")
                .yAxisTitle("Y Axis")
                .width(300).height(300)
</file>



<file file_path=/src/main/java/plotting/DataGenerator.java>
package plotting;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class DataGenerator {

    /**
     * Generates a set of random walk data
     *
     * @param numPoints
     * @return
     */
    public static double[] getRandomWalk(int numPoints) {

        double[] y = new double[numPoints];
        y[0] = 0;
        for (int i = 1; i < y.length; i++) {
            y[i] = y[i - 1] + Math.random() - .5;
        }
        return y;
    }

    public static List<Double> getGaussianData(int count) {

        List<Double> data = new ArrayList<>(count);
        Random r = new Random();
        for (int i = 0; i < count; i++) {
            data.add(r.nextGaussian() * 10);
        }
        return data;
    }

}

</file>



<file file_path=/src/test/java/optimization_apache/TestBowlOptimizationNelderMeadSimplex.java>


        Vector2D point = new Vector2D(result.getPointRef()[0], result.getPointRef()[1]);
        System.out.println("point = " + point);
        Assert.assertEquals(0, point.getX(), DELTA);
        Assert.assertEquals(0, point.getY(), DELTA);
    }
}

</file>



</relevant_code>
